#C:变量存储期及链接类型
2015-09-23<br /><br />
##存储期类型
C中的变量有三钟存储器期类型，分别是自动存储期、静态存储期和动态存储期,变量的存储期的类型关系到该变量生命周期的长短。下面是各个存储期类型的特点:  

- **自动存储期:**一般情况下，在代码块作用域中声明的变量默认是具有自动存储期的变量，也可以加上`auto`关键字来显示表示该变量为自动变量(注意:C中的`auto`与C++11中的`auto`具有不同的含义)，在程序运行时，自动变量会在其所在代码块的程序运行结束后自动消失。
- **静态存储期:**对于代码块作用域的变量而言，要使其具有静态存储期，只须加上`static`关键字即可;对于文件作用域的变量而言，因为文件作用域的变量都具有静态存储器，所以声明时无需加`static`关键字.具有静态存储期的变量，其生命周期为程序运行的整个阶段。
- **动态存储期:**具有动态存储期的变量是由`malloc()`函数来分配的，这种变量的声明周期一直持续到`free()`函数对它们进行释放为止.    

<hr />
##链接类型
C中的链接分为空链接、内部链接和外部链接，变量的链接类型关系到了该变量所能使用的范围的大小。各个链接的特点如下:  

- **空链接:**具有代码块作用域或者函数原型作用域的变量具有空链接，这种变量的使用范围只能是在其所在的代码块或者函数原型中。  
- **内部链接:**一个具有内部链接的变量可以在其所在文件的任何地方使用，要将一个具有文件作用域的变量声明为内部链接，要使用`static`关键字,_**注意:`static`关键字对于代码块作用域变量和件作用域的变量来说，意义是不同的，用`static`关键字来描述一个代码块作用域变量，是让这个变量具有静态存储期;但如果用`static`关键字来修饰文件作用于变量，则表示该变量具有内部链接，因为文件作用域变量本身就具有静态存储期，无需再使用`static`修饰，因此`static`关键字用来修饰文件作用域变量时表示链接类型.**_  
- **外部链接:**一个具有外部链接的变量可以在一个多文件程序的任何地方使用。一个文件作用域的变量默认即具有外部链接。如果要在A文件中使用B文件中的外部链接变量a，需要使用`extern`关键字在A文件中进行引用声明,如:`extern int a;`,`extern`关键字告诉编译期这个变量位于程序中的其他地方或者是其他文件中。_**注意:使用`extern`关键字进行的变量声明不会引起空间分配，因此，不要用`extern`来进行外部定义，只用它来引用一个已经存在的外部变量**_.比如语句`extern char c = 'z';`就是错误的,`extern`关键字标志着这是一个引用声明，而非定义声明。     

<hr />
##存储类修饰符
C中的存储类修饰符有`auto`,`register`,`static`,`extern`,关键字`typedef`也被C归为此类。  

- **auto:**表明一个变量有自动存储期，它只能用于代码作用域的变量声明中。  
- **register:**也只能用于代码块作用域的变量声明，它将一个变量归入寄存器存储类，以便更快的存取，除此以外，寄存器变量与自动变量拥有相同的属性。**注意使用`register`声明的变量不能获取变量的地址。**    
- **static:**对于代码块作用域的变量而言，该关键字表示变量具有静态存储期;对于文件作用域的变量而言，该关键字表明变量具有内部链接。  
- **extern:**对于代码块作用域的变量而言，该关键字表示其所引用的变量具有外部链接或者内部链接，具体取决于所引用变量的声明(如果所引用变量有`static`关键字修饰，则引用的变量具有内部链接;否则，引用的变量具有外部链接);对于文件作用域的变量而言，该关键字引用的变量必然是具有外部链接.  

**注意,不可以在一个声明中使用一个以上存储类说明符，这意味着不能将其他任一存储类说明符作为`typedef`的一部分。**    
###拓展
C++中支持C中的所有这些存储类修饰符，除此之外，C++还增加了一个存储类修饰符`mutable`.  
**mutable**的作用是让一个常量成员函数可以修改struct/class中的声明为`mutable`的成员变量,示例如下:

    class Foo
    {
    	private:
    		mutable int a;
    	public:
			Foo():a(0) {}
    		void change(int x) const
    		{
    			a = x;
    		}
    };
    int main()
    {
    	const Foo foo;
    	foo.change(10);
    	return 0;
    }

<br /><br />
一如既往，如果你对文章中的内容有任何疑问，或者是发现文章中有任何错误，都可以通过下面的地址发邮件告诉我。  
E-mail: rytubuntulinux@gmail.com<br /><br /><br />
