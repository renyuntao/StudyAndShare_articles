#Python:排序操作
2015-10-06 <br />  
##基本的排序操作
&nbsp;&nbsp;&nbsp;在Python中，列表对象有一个**`sort()`**内置函数可以通过在原处修改列表对象来对列表进行排序，不过该函数只能对列表对象进行排序，幸好**`builtins`**模块中有一个**`sorted()`**函数，该函数是内置函数，它可以对任何对象进行排序，与列表对象的**`sort()`**成员函数不同的是，**`sorted()`**并不在原处(**in-place**)修改对象,而是返回一个已序的新对象.下面来看个例子:  

    >>> ls = [1,4,2,3]
    >>> ls.sort()     #使用列表的成员函数list()
    >>> ls
    [1,2,3,4]
    >>> ls = [1,4,2,3]
    >>> sorted(ls)   #调用内置函数sorted()
    [1,2,3,4]
    >>> ls
    [1,4,2,3]        #ls本身没有改变
##使用Key Function进行排序
从Python 2.4开始，**list.sort()**和**sorted()**都增加了**key**关键字参数，默认情况下**key=None**,表示不使用该参数，**None**可以替换为一个函数，该函数必须满足如下要求:

- 接收一个参数   
- 返回一个值作为排序准则

下面来看一个例子:  

    >>> ls = [(12,24),(4,50),(6,30)]     #存储X,Y坐标值
    >>> sorted(ls)
    [(4,50),(6,30),(12,24)]
&nbsp;&nbsp;&nbsp;默认情况下，当列表内存在嵌套结构时，对列表进行排序将依据各个嵌套结构的第一个元素进行排序，上面的例子中，对**`ls`**的排序将按照坐标中的X值进行排序，但是如果我们想要依据坐标中的Y值进行排序应该如何做呢?此时就可以用上面提到的**key**参数了，示例如下:  

    >>> ls = [(12,24),(4,50),(6,30)]
    >>> sorted(ls,key=lambda x:x[1])
    [(12,24),(6,30),(4,50)]
&nbsp;&nbsp;&nbsp;上面的示例中使用了**lambda**匿名函数,该函数接收一个参数，并返回所接受参数的第二个元素作为排序准则，在这个例子中，返回的值就是所存储坐标的Y值了，因此，上面示例中**`sorted()`**将按照坐标的Y值进行排序了.   
###使用operator模块
可以使用**operator**模块中的**itemgetter()**函数来代替自己编写函数,示例如下:   

    >>> from operator import itemgetter
    >>> ls = [(12,24),(4,50),(6,30)]
    >>> sorted(ls,key=itemgetter(1))
    [(12,24),(6,30),(4,50)]
这里的**itemgetter()**的作用与上面例子中的**lambda**函数的作用相同，都是返回坐标的Y值。    
##逆序排序
默认情况下，**`list.sort()`**和**`sorted()`**都是以升序的方式进行排序的，如果想要逆序排序，可以使用这两个函数的**reverse**关键字参数,示例如下:  

    >>> ls = [1,4,2,7,-1]
    >>> sorted(ls,reverse=True)
    [7,4,2,1,-1]
<br />    
一如既往，如果你对文章中的内容有任何疑问，或者是发现文章中有任何错误，都可以通过下面的地址发邮件告诉我.   
E-mail: rytubuntulinux@gmail.com <br />   <br />    


